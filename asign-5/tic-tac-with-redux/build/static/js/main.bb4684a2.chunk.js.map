{"version":3,"sources":["reducer/tableReducer.js","reducer/index.js","action/types.js","store.js","component/Table.js","action/ticAction.js","component/App.js","serviceWorker.js","index.js"],"names":["initialState","matrix","flag","checked","finish","combineReducers","table","state","arguments","length","undefined","action","console","log","type","Object","objectSpread","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","Table","this","props","newState","_this","_this$props$table","check","react_default","a","createElement","className","onClick","dispatch","Component","connect","App","es","src_component_Table","Boolean","window","location","hostname","match","ReactDOM","render","component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb4684a2.chunk.js","sourcesContent":["import {NEW_STATE, UPDATE} from \"../action/types\"\n\nconst initialState = {\n    matrix: [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']],\n    flag: 'x',\n    checked: [[false, false, false], [false, false, false], [false, false, false]],\n    finish: false\n}\n\nexport default function(state = initialState, action) {\n    console.log(\"action:\",action)\n    switch(action.type){\n        case NEW_STATE:\n            return{\n                ...state,\n            }\n        case UPDATE:\n            console.log(action)\n            return{\n                ...state,\n                \n                \n            }\n\n        default:\n            return {\n                ...state\n            }\n    }\n}","import { combineReducers } from 'redux'\nimport tableReducer from './tableReducer'\n\nexport default combineReducers({\n    table: tableReducer\n})","export const NEW_STATE = \"FIRST_STATE\"\nexport const UPDATE = \"UPDATE\"","\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducer'\nimport { createStore, applyMiddleware } from 'redux'\n\nconst initialState = {\n    matrix: [['', '', ''], ['', '', ''], ['', '', '']],\n    flag: 'x',\n    checked: [[false, false, false], [false, false, false], [false, false, false]],\n    finish: false\n}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(...middleware)\n)\n\nexport default store;","import React, { Component } from 'react'\nimport { newState } from '../action/ticAction'\nimport {handleClick} from '../action/ticAction'\nimport { connect } from 'react-redux'\nimport { NEW_STATE,UPDATE } from '../action/types'\nimport './Table.css'\nclass Table extends Component {\n\n    componentWillMount() {\n        this.props.newState()\n    }\n\n    render() {\n        const { matrix, flag, check, finish } = this.props.table\n        console.log(\"props:\", this.props.table)\n        return (\n            <div className=\"table\" >\n                <table>\n                    <tbody>\n                        <tr>\n                            <td onClick={ () => handleClick(0, 0,this.props.table) } > {matrix[0][0]} </td>\n                            <td> {matrix[0][1]} </td>\n                            <td> {matrix[0][2]} </td>\n                        </tr>\n                        <tr>\n                            <td> {matrix[1][0]} </td>\n                            <td> {matrix[1][1]} </td>\n                            <td> {matrix[1][2]} </td>\n                        </tr>\n                        <tr>\n                            <td> {matrix[2][0]} </td>\n                            <td> {matrix[2][1]} </td>\n                            <td> {matrix[2][2]} </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    console.log(\"state:\", state)\n    return { ...state }\n}\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         newPost: () => { dispatch({ type: NEW_STATE }) }\n//     }\n// }\n\nexport default connect(mapStateToProps, { newState })(Table)","import { NEW_STATE, UPDATE } from \"./types\"\n\nexport const newState = () => dispatch => {\n    console.log(\"inside\")\n    return {\n        type: NEW_STATE\n    }\n}\n\nconst checkCondition = (x, y, f) => {\n    let mat = this.state.matrix\n    let count = 0, i;\n\n    for (i = x; i <= 2; i++) {\n        if (mat[i][y] !== '' && mat[i][y] === f) {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for (i = x - 1; i >= 0; i--) {\n        if (mat[i][y] !== '' && mat[i][y] === f) {\n            count++;\n        }\n        else {\n            break\n        }\n    }\n\n    if (count === 3) { return true };\n\n    count = 0\n\n    for (i = y; i <= 2; i++) {\n        if (mat[x][i] !== '' && mat[x][i] === f) {\n            count++;\n        }\n        else {\n            break\n        }\n    }\n\n    for (i = y - 1; i >= 0; i--) {\n        if (mat[x][i] !== '' && mat[x][i] === f) {\n            count++;\n        }\n        else {\n            break\n        }\n    }\n\n    if (count === 3) { return true };\n\n    count = 0;\n\n    for (i = x; i <= 2; i++) {\n        if (mat[i][i] !== '' && mat[i][i] === f) {\n            count++;\n        }\n        else {\n            break\n        }\n    }\n\n    for (i = x - 1; i >= 0; i--) {\n        if (mat[i][i] !== '' && mat[i][i] === f) {\n            count++;\n        }\n        else {\n            break\n        }\n    }\n    if (count === 3) { return true };\n    count = 0\n    for (i = x; i <= 2; i++) {\n        if (mat[i][2 - i] !== '' && mat[i][2 - i] === f) {\n            count++;\n        }\n        else {\n            break\n        }\n    }\n    for (i = x - 1; i >= 0; i--) {\n        if (mat[i][2 - i] !== '' && mat[i][2 - i] === f) {\n            count++;\n        }\n        else {\n            break\n        }\n    }\n    if (count === 3) { return true };\n    return false\n}\n\n\nconst handleClick = (x, y, props)  => dispatch => {\n    \n    return console.log(\"Hello World\")\n\n     console.log(\"handleclick\",props)\n    let { mat, f, ch, finish } = this.props.table\n\n    // let mat = this.state.matrix\n    // let f = this.state.flag\n    // let ch = this.state.checked\n    let pass = f\n    if (finish === false) {\n        if (props.checked[x][y] === false) {\n            ch[x][y] = true\n            if (props.flag === 'x') {\n\n                mat[x][y] = 'x'\n                f = 'y'\n            }\n            else {\n                mat[x][y] = 'y'\n                f = 'x'\n            }\n            // this.setState({\n            //     matrix: mat,\n            //     flag: f,\n            //     checked: ch\n            // })\n            if (f === 'x') {\n                pass = 'y'\n            }\n            else {\n                pass = 'x'\n            }\n            const result = checkCondition(x, y, pass)\n            console.log(result, pass)\n\n\n            if (result === true) {\n                mat[x][y] = pass\n                console.log(props.matrix, x, y)\n                const data = {\n                    type: UPDATE,\n                    matr: mat,\n                    fl: f,\n                    check: ch,\n                    fin: true\n                }\n                return dispatch({\n                    data\n                })\n\n                // this.setState({\n                //     matrix: mat,\n                //     finish: true\n                // })\n\n                // window.alert(\"player \"+pass+\" won the match\");\n            }\n            else {\n                mat[x][y] = pass\n                console.log(props.matrix, x, y)\n                const data = {\n                    type: UPDATE,\n                    matr: mat,\n                    fl: f,\n                    check: ch,\n                    fin: false\n                   \n                }\n\n                return dispatch({\n                    data\n                })\n            }\n\n        }\n    }\n    else {\n        console.log(\"game finished\")\n        window.alert(\"Game Finished\")\n    }\n\n\n}\nexport  {handleClick}","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport  store  from '../store'\nimport Table from './Table'\n\nfunction App() {\n  return (\n    <Provider store={store} >\n      <div className=\"App\">\n        <Table />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}